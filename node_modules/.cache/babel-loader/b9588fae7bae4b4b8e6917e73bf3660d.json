{"ast":null,"code":"var _jsxFileName = \"/Users/kshitizbali/Documents/REACT/react-complete-guide-2/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  //Approach 1\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  let [showForm, setShowForm] = useState('false'); //Approach 2\n  // const [userInput, setUserInput]= useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: '',\n  // });\n\n  const titleChangeHandler = event => {\n    //Approach 1\n    setEnteredTitle(event.target.value); //IF out state updatea depends on the previous state. We have 2 approaches.\n    // Always use Approach 1 which guarantees React to properly use old state and\n    //update the new state.\n    // Approach 1.\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredTitle: event.target.value};\n    // });\n    // Approach 2. We save the previous state with userInput for other params.\n    // setUserInput({\n    //     ...userInput,\n    //     enteredTitle: event.target.value\n    // })\n  };\n\n  const amountChangeHandler = event => {\n    //Approach 1\n    setEnteredAmount(event.target.value); //IF out state updatea depends on the previous state. We have 2 approaches.\n    // Always use Approach 1 which guarantees React to properly use old state and\n    //update the new state.\n    // Approach 1.\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredAmount: event.target.value};\n    // });\n    //  Approach 2. We save the previous state with userInput for other params.\n    //  setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value\n    // })\n  };\n\n  const dateChangeHandler = event => {\n    //Approach 1\n    setEnteredDate(event.target.value); //IF out state updatea depends on the previous state. We have 2 approaches.\n    // Always use Approach 1 which guarantees React to properly use old state and\n    //update the new state.\n    // Approach 1.\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredDate: event.target.value};\n    // });\n    //  Approach 2. We save the previous state with userInput for other params.\n    //  setUserInput({\n    //     ...userInput,\n    //     enteredDate: event.target.value\n    // })\n  };\n\n  const submitHanlder = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle('');\n    setEnteredAmount('');\n    setEnteredDate('');\n  };\n\n  const cancelHandler = event => {\n    event.preventDefault();\n    setShowForm(false);\n  };\n\n  let form = () => {\n    if (showForm) {\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHanlder,\n        onReset: cancelHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-expense__control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: enteredTitle,\n              onChange: titleChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-expense__control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0.01\",\n              step: \"0.01\",\n              value: enteredAmount,\n              onChange: amountChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-expense__control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              min: \"2020-01-01\",\n              max: \"2023-12-31\",\n              value: enteredDate,\n              onChange: dateChangeHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"reset\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHanlder,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 20\n      }, this);\n    }\n  };\n\n  return {\n    form\n  }; // return (<form onSubmit={submitHanlder}>\n  //     <div className=\"new-expense__controls\">\n  //         <div className=\"new-expense__control\">\n  //             <label>Title</label>\n  //             <input type='text' value={enteredTitle} onChange={titleChangeHandler}/>\n  //         </div>\n  //         <div className=\"new-expense__control\">\n  //             <label>Amount</label>\n  //             <input type='number' min=\"0.01\" step=\"0.01\" value={enteredAmount} onChange={amountChangeHandler}/>\n  //         </div>\n  //         <div className=\"new-expense__control\">\n  //             <label>Date</label>\n  //             <input type='date' min=\"2020-01-01\" max=\"2023-12-31\" value={enteredDate} onChange={dateChangeHandler}/>\n  //         </div>\n  //     </div>\n  //     <div className=\"new-expense__actions\">\n  //         <button type=\"submit\">Add Expense</button>\n  //     </div>\n  // </form>);\n};\n\n_s(ExpenseForm, \"K2yW+Cg1j/E83TfOaLHdDxAXJEo=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","showForm","setShowForm","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHanlder","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","cancelHandler","form"],"sources":["/Users/kshitizbali/Documents/REACT/react-complete-guide-2/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, {useState} from \"react\";\n\nimport './ExpenseForm.css'\n\nconst ExpenseForm = (props) => {\n    //Approach 1\n    const [enteredTitle, setEnteredTitle] = useState('');\n    const [enteredAmount, setEnteredAmount] = useState('');\n    const [enteredDate, setEnteredDate] = useState('');\n    let [showForm, setShowForm] = useState('false');\n\n    //Approach 2\n    // const [userInput, setUserInput]= useState({\n    //     enteredTitle: '',\n    //     enteredAmount: '',\n    //     enteredDate: '',\n    // });\n\n    const titleChangeHandler = (event) => {\n        //Approach 1\n        setEnteredTitle(event.target.value);\n\n        //IF out state updatea depends on the previous state. We have 2 approaches.\n        // Always use Approach 1 which guarantees React to properly use old state and\n        //update the new state.\n        // Approach 1.\n        // setUserInput((prevState) => {\n        //     return {...prevState, enteredTitle: event.target.value};\n        // });\n        // Approach 2. We save the previous state with userInput for other params.\n        // setUserInput({\n        //     ...userInput,\n        //     enteredTitle: event.target.value\n        // })\n    };\n\n    const amountChangeHandler = (event) => {\n        //Approach 1\n        setEnteredAmount(event.target.value);\n\n        //IF out state updatea depends on the previous state. We have 2 approaches.\n        // Always use Approach 1 which guarantees React to properly use old state and\n        //update the new state.\n        // Approach 1.\n        // setUserInput((prevState) => {\n        //     return {...prevState, enteredAmount: event.target.value};\n        // });\n        //  Approach 2. We save the previous state with userInput for other params.\n        //  setUserInput({\n        //     ...userInput,\n        //     enteredAmount: event.target.value\n        // })\n    };\n\n    const dateChangeHandler = (event) => {\n        //Approach 1\n        setEnteredDate(event.target.value);\n\n        //IF out state updatea depends on the previous state. We have 2 approaches.\n        // Always use Approach 1 which guarantees React to properly use old state and\n        //update the new state.\n        // Approach 1.\n        // setUserInput((prevState) => {\n        //     return {...prevState, enteredDate: event.target.value};\n        // });\n        //  Approach 2. We save the previous state with userInput for other params.\n        //  setUserInput({\n        //     ...userInput,\n        //     enteredDate: event.target.value\n        // })\n    };\n\n    const submitHanlder = (event) => {\n        event.preventDefault();\n        \n        const expenseData = {\n            title: enteredTitle,\n            amount: enteredAmount,\n            date: new Date(enteredDate)\n        };\n\n        props.onSaveExpenseData(expenseData)\n        setEnteredTitle('');\n        setEnteredAmount('');\n        setEnteredDate('');\n    };\n\n    const cancelHandler = (event) => {\n        event.preventDefault();\n        setShowForm(false);\n    }\n\n\n    let form = () => {\n        if(showForm){\n            return (<form onSubmit={submitHanlder} onReset={cancelHandler}>\n                <div className=\"new-expense__controls\">\n                    <div className=\"new-expense__control\">\n                        <label>Title</label>\n                        <input type='text' value={enteredTitle} onChange={titleChangeHandler}/>\n                    </div>\n                    <div className=\"new-expense__control\">\n                        <label>Amount</label>\n                        <input type='number' min=\"0.01\" step=\"0.01\" value={enteredAmount} onChange={amountChangeHandler}/>\n                    </div>\n                    <div className=\"new-expense__control\">\n                        <label>Date</label>\n                        <input type='date' min=\"2020-01-01\" max=\"2023-12-31\" value={enteredDate} onChange={dateChangeHandler}/>\n                    </div>\n                </div>\n                <div className=\"new-expense__actions\">\n                    <button type=\"reset\">Cancel</button>\n                </div>\n                <div className=\"new-expense__actions\">\n                    <button type=\"submit\">Add Expense</button>\n                </div>\n            </form>);\n        } else {\n           return (<form onSubmit={submitHanlder}>\n                <div className=\"new-expense__actions\">\n                    <button type=\"submit\">Add Expense</button>\n                </div>\n            </form>);\n        }\n    }\n\n    return {form};\n\n    // return (<form onSubmit={submitHanlder}>\n    //     <div className=\"new-expense__controls\">\n    //         <div className=\"new-expense__control\">\n    //             <label>Title</label>\n    //             <input type='text' value={enteredTitle} onChange={titleChangeHandler}/>\n    //         </div>\n    //         <div className=\"new-expense__control\">\n    //             <label>Amount</label>\n    //             <input type='number' min=\"0.01\" step=\"0.01\" value={enteredAmount} onChange={amountChangeHandler}/>\n    //         </div>\n    //         <div className=\"new-expense__control\">\n    //             <label>Date</label>\n    //             <input type='date' min=\"2020-01-01\" max=\"2023-12-31\" value={enteredDate} onChange={dateChangeHandler}/>\n    //         </div>\n    //     </div>\n    //     <div className=\"new-expense__actions\">\n    //         <button type=\"submit\">Add Expense</button>\n    //     </div>\n    // </form>);\n};\n\nexport default ExpenseForm"],"mappings":"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"},"metadata":{},"sourceType":"module"}