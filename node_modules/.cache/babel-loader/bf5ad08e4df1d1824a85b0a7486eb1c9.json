{"ast":null,"code":"var _jsxFileName = \"/Users/kshitizbali/Documents/REACT/react-complete-guide-2/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  //Approach 1\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState(''); //Approach 2\n  // const [userInput, setUserInput]= useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: '',\n  // });\n\n  const titleChangeHandler = event => {\n    //Approach 1\n    setEnteredTitle(event.target.value); //IF out state updatea depends on the previous state. We have 2 approaches.\n    // Always use Approach 1 which guarantees React to properly use old state and\n    //update the new state.\n    // Approach 1.\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredTitle: event.target.value};\n    // });\n    // Approach 2. We save the previous state with userInput for other params.\n    // setUserInput({\n    //     ...userInput,\n    //     enteredTitle: event.target.value\n    // })\n  };\n\n  const amountChangeHandler = event => {\n    //Approach 1\n    setEnteredAmount(event.target.value); //IF out state updatea depends on the previous state. We have 2 approaches.\n    // Always use Approach 1 which guarantees React to properly use old state and\n    //update the new state.\n    // Approach 1.\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredAmount: event.target.value};\n    // });\n    //  Approach 2. We save the previous state with userInput for other params.\n    //  setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value\n    // })\n  };\n\n  const dateChangeHandler = event => {\n    //Approach 1\n    setEnteredDate(event.tartget.value); //IF out state updatea depends on the previous state. We have 2 approaches.\n    // Always use Approach 1 which guarantees React to properly use old state and\n    //update the new state.\n    // Approach 1.\n    // setUserInput((prevState) => {\n    //     return {...prevState, enteredDate: event.target.value};\n    // });\n    //  Approach 2. We save the previous state with userInput for other params.\n    //  setUserInput({\n    //     ...userInput,\n    //     enteredDate: event.target.value\n    // })\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","tartget"],"sources":["/Users/kshitizbali/Documents/REACT/react-complete-guide-2/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, {useState} from \"react\";\n\nimport './ExpenseForm.css'\n\nconst ExpenseForm = () => {\n    //Approach 1\n    const [enteredTitle, setEnteredTitle] = useState('');\n    const [enteredAmount, setEnteredAmount] = useState('');\n    const [enteredDate, setEnteredDate] = useState('');\n\n    //Approach 2\n    // const [userInput, setUserInput]= useState({\n    //     enteredTitle: '',\n    //     enteredAmount: '',\n    //     enteredDate: '',\n    // });\n\n    const titleChangeHandler = (event) => {\n        //Approach 1\n        setEnteredTitle(event.target.value);\n\n        //IF out state updatea depends on the previous state. We have 2 approaches.\n        // Always use Approach 1 which guarantees React to properly use old state and\n        //update the new state.\n        // Approach 1.\n        // setUserInput((prevState) => {\n        //     return {...prevState, enteredTitle: event.target.value};\n        // });\n        // Approach 2. We save the previous state with userInput for other params.\n        // setUserInput({\n        //     ...userInput,\n        //     enteredTitle: event.target.value\n        // })\n    };\n\n    const amountChangeHandler = (event) => {\n        //Approach 1\n        setEnteredAmount(event.target.value);\n\n        //IF out state updatea depends on the previous state. We have 2 approaches.\n        // Always use Approach 1 which guarantees React to properly use old state and\n        //update the new state.\n        // Approach 1.\n        // setUserInput((prevState) => {\n        //     return {...prevState, enteredAmount: event.target.value};\n        // });\n        //  Approach 2. We save the previous state with userInput for other params.\n        //  setUserInput({\n        //     ...userInput,\n        //     enteredAmount: event.target.value\n        // })\n    };\n\n    const dateChangeHandler = (event) => {\n        //Approach 1\n        setEnteredDate(event.tartget.value);\n\n        //IF out state updatea depends on the previous state. We have 2 approaches.\n        // Always use Approach 1 which guarantees React to properly use old state and\n        //update the new state.\n        // Approach 1.\n        // setUserInput((prevState) => {\n        //     return {...prevState, enteredDate: event.target.value};\n        // });\n        //  Approach 2. We save the previous state with userInput for other params.\n        //  setUserInput({\n        //     ...userInput,\n        //     enteredDate: event.target.value\n        // })\n    };\n\n    return (<form>\n        <div className=\"new-expense__controls\">\n            <div className=\"new-expense__control\">\n                <label>Title</label>\n                <input type='text' onChange={titleChangeHandler}/>\n            </div>\n            <div className=\"new-expense__control\">\n                <label>Amount</label>\n                <input type='number' min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler}/>\n            </div>\n            <div className=\"new-expense__control\">\n                <label>Date</label>\n                <input type='date' min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\n            </div>\n        </div>\n        <div className=\"new-expense__actions\">\n            <button type=\"submit\">Add Expense</button>\n        </div>\n    </form>);\n};\n\nexport default ExpenseForm"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AAEA,OAAO,mBAAP;;;AAEA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACtB;EACA,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C,CAJsB,CAMtB;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMQ,kBAAkB,GAAIC,KAAD,IAAW;IAClC;IACAN,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAFkC,CAIlC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH,CAhBD;;EAkBA,MAAMC,mBAAmB,GAAIH,KAAD,IAAW;IACnC;IACAJ,gBAAgB,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB,CAFmC,CAInC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH,CAhBD;;EAkBA,MAAME,iBAAiB,GAAIJ,KAAD,IAAW;IACjC;IACAF,cAAc,CAACE,KAAK,CAACK,OAAN,CAAcH,KAAf,CAAd,CAFiC,CAIjC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH,CAhBD;;EAkBA,oBAAQ;IAAA,wBACJ;MAAK,SAAS,EAAC,uBAAf;MAAA,wBACI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAEH;QAA7B;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAKI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,QAAZ;UAAqB,GAAG,EAAC,MAAzB;UAAgC,IAAI,EAAC,MAArC;UAA4C,QAAQ,EAAEI;QAAtD;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ,eASI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,GAAG,EAAC,YAAvB;UAAoC,GAAG,EAAC,YAAxC;UAAqD,QAAQ,EAAEC;QAA/D;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADI,eAeJ;MAAK,SAAS,EAAC,sBAAf;MAAA,uBACI;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAfI;EAAA;IAAA;IAAA;IAAA;EAAA,QAAR;AAmBH,CAtFD;;GAAMZ,W;;KAAAA,W;AAwFN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}